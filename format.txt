Formatting :

Four sections : top, bottom, left, right, for where you want the pins to be.
To start a section, write its name (case-insensitive) with a # in front :
pin descriptions that follow will belong to that section.
Sections can be called multiple times.

Pins can be :
  ground pin
  1 ground pin
So either a name or a number and a name.

Instead of a number, you can also specify an (inclusive) range, like this :
  0-7 I/O
Alternatively, specify a number of pins, like this :
  8x I/O
They'll be numbered and placed automatically. This, as of now, works counter-
-clockwise, starting from the side with the (last) alignment mark.

Pins with no section are on the top.
Pins with no color are black.

That's right, you can specify color. It works like sections :
  # blue
will color everything after it blue. You can use any CSS color name or code.
You can go back to the default color (likely black or white) with `# nocolor`.

You can add an alignment mark to a section by calling `# mark`.
You can also add a title with `# title`, just write it on the following lines.

It is possible to add formatting to pin names :
  `3 /RESET` will be represented with an overline (active on low).
  `4 <CLK` : `<` adds an arrow going in and `>` one going out
  `7 V_SS` will represent SS as subscript
  `8 10e^15` will represent 15 as superscript
The backslash escapes the special characters :
  `14 V\_SS` will print 'V_SS'
Backslash escaping also works outside of pin names, so you can name a pin
`# Hello` by writing `\# Hello`.



Empty lines and lines starting with `//` (C++ style comments, although really
this syntax comes from BCPL.) are ignored.
Control sequences (starting with `#`) have their whitespace and case ignored,
so `#NOCOLOR` is the same as `# no color`.
